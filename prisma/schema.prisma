// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String    @id @default(cuid())
  name              String?
  email             String    @unique
  emailVerified     DateTime?
  image             String?
  password          String?
  preferredLanguage String    @default("en")
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Social platform tokens
  tiktokToken    String?
  youtubeToken   String?
  instagramToken String?

  // User preferences
  primaryPlatform String?
  contentNiche    String?
  targetRegion    String?

  accounts        Account[]
  sessions        Session[]
  historyRecords  HistoryRecord[]
  savedCalculations SavedCalculation[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model HistoryRecord {
  id          String   @id @default(cuid())
  userId      String
  platform    String
  inputData   Json
  resultData  Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([platform])
}

model SavedCalculation {
  id          String   @id @default(cuid())
  userId      String
  name        String
  platform    String
  inputData   Json
  resultData  Json
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([platform])
  @@index([isPublic])
}

model PlatformConfig {
  id        String   @id @default(cuid())
  platform  String   @unique
  config    Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([platform])
}

model NicheFactor {
  id        String   @id @default(cuid())
  platform  String
  niche     String
  factor    Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([platform, niche])
  @@index([platform])
}

model RegionFactor {
  id        String   @id @default(cuid())
  platform  String
  region    String
  cpmValue  Float
  factor    Float
  currency  String   @default("USD")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([platform, region])
  @@index([platform])
}

model IndustryBenchmark {
  id               String   @id @default(cuid())
  platform         String
  followerRange    String   // e.g., "10k-50k", "50k-100k"
  avgEngagementRate Float
  avgEarningsMin   Float
  avgEarningsMax   Float
  currency         String   @default("USD")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@unique([platform, followerRange])
  @@index([platform])
}

model ExchangeRate {
  id           String   @id @default(cuid())
  fromCurrency String
  toCurrency   String
  rate         Float
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([fromCurrency, toCurrency])
  @@index([fromCurrency, toCurrency])
}